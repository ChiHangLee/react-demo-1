{"version":3,"sources":["index.js"],"names":["Cell","props","className","onClick","text","Chessboard","useState","cells","setCells","finished","setFinished","n","setN","onClickCell","row","col","copy","JSON","parse","stringify","i","console","log","tell","map","items","item","ReactDOM","render","document","getElementById"],"mappings":"sKAMMA,G,YAAO,SAAUC,GACrB,OACE,qBAAKC,UAAU,OAAOC,QAASF,EAAME,QAArC,SACGF,EAAMG,SAMPC,EAAa,WAAa,IAAD,EAEHC,mBAAS,CACjC,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,QALc,mBAEtBC,EAFsB,KAEfC,EAFe,OAOGF,oBAAS,GAPZ,mBAOtBG,EAPsB,KAOZC,EAPY,OAQXJ,mBAAS,GARE,mBAQtBK,EARsB,KAQnBC,EARmB,KA4CvBC,EAAc,SAACC,EAAKC,GAExBH,EAAKD,EAAI,GAET,IAAMK,EAAOC,KAAKC,MAAMD,KAAKE,UAAUZ,IACvCS,EAAKF,GAAKC,GAAOJ,EAAI,GAAK,EAAI,IAAM,IACpCH,EAASQ,GAzCE,SAACT,GACZ,IAAK,IAAIa,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAIb,EAAMa,GAAG,KAAOb,EAAMa,GAAG,IAAMb,EAAMa,GAAG,KAAOb,EAAMa,GAAG,IAC1C,OAAhBb,EAAMa,GAAG,GAAa,CACtBC,QAAQC,IAAIf,EAAMa,GAAG,GAAK,gBAC1BV,GAAY,GACZ,MAIJ,IAAK,IAAIU,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAIb,EAAM,GAAGa,KAAOb,EAAM,GAAGa,IAAMb,EAAM,GAAGa,KAAOb,EAAM,GAAGa,IAC1C,OAAhBb,EAAM,GAAGa,GAAa,CACtBC,QAAQC,IAAIf,EAAM,GAAGa,GAAK,gBAC1BV,GAAY,GACZ,MAIFH,EAAM,GAAG,KAAOA,EAAM,GAAG,IACzBA,EAAM,GAAG,KAAOA,EAAM,GAAG,IACT,OAAhBA,EAAM,GAAG,KAETc,QAAQC,IAAIf,EAAM,GAAG,GAAK,gBAC1BG,GAAY,IAGZH,EAAM,GAAG,KAAOA,EAAM,GAAG,IACzBA,EAAM,GAAG,KAAOA,EAAM,GAAG,IACT,OAAhBA,EAAM,GAAG,KAETc,QAAQC,IAAIf,EAAM,GAAG,GAAK,gBAC1BG,GAAY,IAWda,CAAKP,IAEP,OACE,gCACE,qCAAQL,KACPJ,EAAMiB,KAAI,SAACC,EAAOX,GAAR,OAAgB,qBAAKZ,UAAU,MAAf,SACxBuB,EAAMD,KAAI,SAACE,EAAMX,GAAP,OAAe,qBAAKb,UAAU,MAAf,SACxB,cAACF,EAAD,CAAMI,KAAMsB,EAAMvB,QAAS,kBAAMU,EAAYC,EAAKC,gBAGrDN,GAAY,qBAAKP,UAAU,WAAf,0CAKnByB,IAASC,OAAO,8BACd,cAACvB,EAAD,MACMwB,SAASC,eAAe,U","file":"static/js/main.1090d1e6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport { templateLiteral } from '@babel/types';\n\n\nconst Cell = function (props) {\n  return (\n    <div className=\"cell\" onClick={props.onClick}>\n      {props.text}\n    </div>\n  )\n}\n\n\nconst Chessboard = function () {\n\n  const [cells, setCells] = useState([\n    [null, null, null],\n    [null, null, null],\n    [null, null, null],\n  ])\n  const [finished, setFinished] = useState(false)\n  const [n, setN] = useState(0)\n  const tell = (cells) => {\n    for (let i = 0; i < 3; i++) {\n      if (cells[i][0] === cells[i][1] && cells[i][1] === cells[i][2] &&\n        cells[i][0] !== null) {\n        console.log(cells[i][0] + '赢了')\n        setFinished(true)\n        break;\n      }\n\n    }\n    for (let i = 0; i < 3; i++) {\n      if (cells[0][i] === cells[1][i] && cells[1][i] === cells[2][i] &&\n        cells[0][i] !== null) {\n        console.log(cells[0][i] + '赢了')\n        setFinished(true)\n        break;\n      }\n    }\n    if (\n      cells[0][0] === cells[1][1] &&\n      cells[1][1] === cells[2][2] &&\n      cells[0][0] !== null\n    ) {\n      console.log(cells[0][0] + '赢了')\n      setFinished(true)\n    }\n    if (\n      cells[0][2] === cells[1][1] &&\n      cells[1][1] === cells[2][0] &&\n      cells[1][1] !== null\n    ) {\n      console.log(cells[1][1] + '赢了')\n      setFinished(true)\n    }\n  }\n  const onClickCell = (row, col) => {\n    // n + 1\n    setN(n + 1)\n    // 改变 cells\n    const copy = JSON.parse(JSON.stringify(cells))\n    copy[row][col] = n % 2 == 0 ? 'x' : 'o'\n    setCells(copy)\n    // 判断谁赢\n    tell(copy)\n  }\n  return (\n    <div>\n      <div>n:{n}</div>\n      {cells.map((items, row) => <div className=\"row\">\n        {items.map((item, col) => <div className=\"col\">\n          <Cell text={item} onClick={() => onClickCell(row, col)} />\n        </div>)}\n      </div>)}\n      {finished && <div className=\"gameOver\">游戏结束</div>}\n    </div>\n  )\n}\n\nReactDOM.render(<div>\n  <Chessboard />\n</div>, document.getElementById('root'))\n\n\n\n\n"],"sourceRoot":""}